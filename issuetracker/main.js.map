{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/create/create.component.css","webpack:///./src/app/components/create/create.component.html","webpack:///./src/app/components/create/create.component.ts","webpack:///./src/app/components/edit/edit.component.css","webpack:///./src/app/components/edit/edit.component.html","webpack:///./src/app/components/edit/edit.component.ts","webpack:///./src/app/components/list/list.component.css","webpack:///./src/app/components/list/list.component.html","webpack:///./src/app/components/list/list.component.ts","webpack:///./src/app/issue.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".title-center {\\r\\n    margin: 0 auto;\\r\\n  }\"","module.exports = \"<mat-toolbar>\\n  <span  class=\\\"title-center\\\">Issue Tracker</span>\\n</mat-toolbar>\\n\\n<div>\\n  <router-outlet></router-outlet>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { RouterModule, Routes } from '@angular/router';//For routes\n\n//For http client, to be used by service\nimport { HttpClientModule } from '@angular/common/http';\n\n//For using Form Builders\nimport { ReactiveFormsModule } from '@angular/forms';\n\n//Importing components\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ListComponent } from './components/list/list.component';\nimport { CreateComponent } from './components/create/create.component';\nimport { EditComponent } from './components/edit/edit.component';\n\n//For material designing\nimport { MatToolbarModule, MatFormFieldModule, MatInputModule, MatOptionModule, MatSelectModule, MatIconModule\n,MatButtonModule, MatCardModule, MatTableModule, MatDividerModule, MatSnackBarModule } from '@angular/material' ;\n\n//For service class \nimport { IssueService } from './issue.service';\n\n\n\nconst routes: Routes = [\n  { path:'create', component: CreateComponent },\n  { path:'edit/:id', component: EditComponent },\n  { path:'list', component: ListComponent },\n  { path:'', redirectTo: 'list', pathMatch: 'full' }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListComponent,\n    CreateComponent,\n    EditComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    RouterModule.forRoot(routes),\n    ReactiveFormsModule,\n    MatToolbarModule,\n    MatFormFieldModule, \n    MatInputModule, \n    MatOptionModule, \n    MatSelectModule, \n    MatIconModule,\n    MatButtonModule, \n    MatCardModule, \n    MatTableModule, \n    MatDividerModule, \n    MatSnackBarModule\n  ],\n  providers: [IssueService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\r\\n.create-form {\\r\\n    min-width: 150px;\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.field-full-width {\\r\\n    width: 100%;\\r\\n}\"","module.exports = \"<div>\\n    <br>\\n    <mat-card>\\n      <section class=\\\"mat-typography\\\">\\n        <h3>Create A New Issue</h3>\\n      </section>\\n      <mat-divider></mat-divider>\\n      <br>\\n      <form [formGroup]=\\\"createForm\\\" class=\\\"create-form\\\">\\n        <mat-form-field class=\\\"field-full-width\\\">\\n          <input matInput placeholder=\\\"Issue Title\\\" formControlName=\\\"title\\\" #title>\\n          <!--<mat-error *ngIf=\\\"createForm.controls['title'].errors.required\\\">\\n            Title is <strong>required</strong>\\n          </mat-error>-->\\n        </mat-form-field>\\n        <mat-form-field class=\\\"field-full-width\\\">\\n          <input matInput placeholder=\\\"Responsible\\\" formControlName=\\\"responsible\\\" #responsible>\\n        </mat-form-field>\\n        <mat-form-field class=\\\"field-full-width\\\">\\n          <textarea matInput placeholder=\\\"Description\\\" formControlName=\\\"description\\\" #description></textarea>\\n        </mat-form-field>\\n        <mat-form-field>\\n            <mat-select placeholder=\\\"Severity\\\" formControlName=\\\"severity\\\" #severity>\\n              <mat-option value=\\\"Low\\\">Low</mat-option>\\n              <mat-option value=\\\"Medium\\\">Medium</mat-option>\\n              <mat-option value=\\\"High\\\">High</mat-option>\\n            </mat-select>\\n        </mat-form-field>\\n        <mat-divider></mat-divider>\\n        <br><br>\\n        <button mat-raised-button color=\\\"warn\\\" routerLink=\\\"/list\\\">Back</button>&nbsp;\\n        <button type=\\\"submit\\\" (click)=\\\"addIssue(title.value, responsible.value, description.value, severity.value)\\\" [disabled]=\\\"createForm.pristine || createForm.invalid\\\" mat-raised-button color=\\\"primary\\\">Save</button>\\n      </form>\\n    </mat-card>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { IssueService } from '../../issue.service';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent implements OnInit {\n\n  createForm: FormGroup;\n\n  constructor(private issueService: IssueService, private fb: FormBuilder, private router: Router) { \n    this.createForm = this.fb.group({\n      title: ['',Validators.required],\n      responsible: '',\n      description: '',\n      severity: ''\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  addIssue(title,responsible,description,severity){\n    this.issueService.addIssue(title,responsible,description,severity).subscribe(()=>{\n      this.router.navigate(['/list']);\n    });\n  }\n\n}\n","module.exports = \".edit-form {\\r\\n    min-width: 150px;\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.field-full-width {\\r\\n    width: 100%;\\r\\n}\"","module.exports = \"<div>\\n    <br>\\n    <mat-card>\\n      <section class=\\\"mat-typography\\\">\\n        <h3>Update Issue</h3>\\n      </section>\\n      <mat-divider></mat-divider>\\n      <br>\\n      <form [formGroup]=\\\"updateForm\\\" class=\\\"edit-form\\\">\\n        <mat-form-field class=\\\"field-full-width\\\">\\n          <input matInput placeholder=\\\"Issue Title\\\" formControlName=\\\"title\\\" #title>\\n        </mat-form-field>\\n        <mat-form-field class=\\\"field-full-width\\\">\\n          <input matInput placeholder=\\\"Responsible\\\" formControlName=\\\"responsible\\\" #responsible>\\n        </mat-form-field>\\n        <mat-form-field class=\\\"field-full-width\\\">\\n          <textarea matInput placeholder=\\\"Description\\\" formControlName=\\\"description\\\" #description></textarea>\\n        </mat-form-field>\\n        <mat-form-field>\\n            <mat-select placeholder=\\\"Severity\\\" formControlName=\\\"severity\\\" #severity>\\n              <mat-option value=\\\"Low\\\">Low</mat-option>\\n              <mat-option value=\\\"Medium\\\">Medium</mat-option>\\n              <mat-option value=\\\"High\\\">High</mat-option>\\n            </mat-select>\\n        </mat-form-field>\\n        <mat-form-field>\\n          <mat-select placeholder=\\\"Status\\\" formControlName=\\\"status\\\" #status>\\n            <mat-option value=\\\"Open\\\">Open</mat-option>\\n            <mat-option value=\\\"In Progress\\\">In Progress</mat-option>\\n            <mat-option value=\\\"Done\\\">Done</mat-option>\\n          </mat-select>\\n      </mat-form-field>\\n        <mat-divider></mat-divider>\\n        <br><br>\\n        <button mat-raised-button color=\\\"warn\\\" routerLink=\\\"/list\\\">Back</button>&nbsp;\\n        <button type=\\\"submit\\\" (click)=\\\"updateIssue(title.value, responsible.value, description.value, severity.value, status.value)\\\" [disabled]=\\\"updateForm.pristine || updateForm.invalid\\\" mat-raised-button color=\\\"primary\\\">Save</button>\\n      </form>\\n    </mat-card>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\nimport { MatSnackBar } from '@angular/material';\n\nimport { IssueService } from '../../issue.service';\nimport { Issue } from '../../issue.model';\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent implements OnInit {\n\n  id: String;\n  issue: any = {};\n  updateForm: FormGroup;\n\n  constructor(private issueService: IssueService, private router: Router, private route: ActivatedRoute\n  ,private snackBar: MatSnackBar,private fb:FormBuilder) { \n    this.updateForm = this.fb.group({\n      title: ['', Validators.required],\n      responsible: '',\n      description: '',\n      severity: '',\n      status: ''\n    });\n  }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.id = params.id;\n      this.issueService.getIssueById(this.id).subscribe(res => {\n        this.issue = res;\n        this.updateForm.get('title').setValue(this.issue.title);\n        this.updateForm.get('responsible').setValue(this.issue.responsible);\n        this.updateForm.get('description').setValue(this.issue.description);\n        this.updateForm.get('severity').setValue(this.issue.severity);\n        this.updateForm.get('status').setValue(this.issue.status);\n      });\n    });\n  }\n\n  updateIssue(title, responsible, description, severity, status) {\n    this.issueService.updateIssue(this.id, title, responsible, description, severity, status).subscribe(() => {\n      this.snackBar.open('Issue updated successfully', 'OK', {\n        duration: 3000\n      });\n    });\n  }\n\n}","module.exports = \"table {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.mat-column-right {\\r\\n    text-align: center;\\r\\n}\"","module.exports = \"<div>\\n    <br>\\n    <mat-card>\\n      <button mat-raised-button color=\\\"primary\\\" routerLink=\\\"/create\\\">Create New Issue</button>\\n      <br><br>\\n      <mat-divider></mat-divider>\\n      <br>\\n      <table mat-table [dataSource]=\\\"issues\\\" >\\n        <ng-container matColumnDef=\\\"title\\\">\\n          <th mat-header-cell *matHeaderCellDef>Title</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.title}} </td>\\n        </ng-container>\\n  \\n        <ng-container matColumnDef=\\\"responsible\\\">\\n          <th mat-header-cell *matHeaderCellDef>Responsible</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.responsible}} </td>\\n        </ng-container>\\n  \\n        <ng-container matColumnDef=\\\"severity\\\">\\n          <th mat-header-cell *matHeaderCellDef>Severity</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.severity}} </td>\\n        </ng-container>\\n  \\n        <ng-container matColumnDef=\\\"status\\\">\\n          <th mat-header-cell *matHeaderCellDef>Status</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.status}} </td>\\n        </ng-container>\\n  \\n        <ng-container matColumnDef=\\\"actions\\\">\\n          <th mat-header-cell *matHeaderCellDef class=\\\"mat-column-right\\\">Actions</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"mat-column-right\\\">\\n            <button mat-button color=\\\"primary\\\" (click)=\\\"editIssue(element._id)\\\">Edit</button>\\n            <button mat-button color=\\\"warn\\\" (click)=\\\"deleteIssue(element._id)\\\">Delete</button>\\n          </td>\\n        </ng-container>\\n  \\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  \\n      </table>\\n    </mat-card>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatTableDataSource } from '@angular/material';\n\nimport { Issue } from '../../issue.model';\n\n\nimport { IssueService } from '../../issue.service';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n\n  issues: Issue[];\n  displayedColumns: string[]= ['title','responsible','severity','status','actions'];\n\n  constructor(private issueService: IssueService, private router: Router) { }\n\n  ngOnInit() {\n    this.fetchIssues();\n  }\n\n\n  fetchIssues(){\n    this.issueService.getIssues().subscribe((data: Issue[])=>{\n      this.issues=data;\n      console.log(\"get service call\");\n      console.log(this.issues);\n    });\n  }\n\n  editIssue(id){//This part will be done by edit component so we will navigate to that\n    this.router.navigate ([`/edit/${id}`]);\n  }\n\n  deleteIssue(id){\n    this.issueService.deleteIssue(id).subscribe(()=>{\n      this.fetchIssues();\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IssueService {\n\n  uri='https://issuesbackend.herokuapp.com'\n\n  constructor(private http: HttpClient) { }\n\n  getIssues(){\n    return this.http.get(`${this.uri}/issues`);\n  }\n\n  getIssueById(id){\n    return this.http.get(`${this.uri}/issues/${id}`);\n  }\n\n  addIssue(title,responsible,description,severity){\n    const issue = {\n      title: title,\n      responsible: responsible,\n      description: description,\n      severity: severity\n    };\n    return this.http.post(`${this.uri}/issues/add`,issue);\n  }\n\n  updateIssue(id,title,responsible,description,severity,status){\n    const issue = {\n      title: title,\n      responsible: responsible,\n      description: description,\n      severity: severity,\n      status: status\n    };\n    return this.http.post(`${this.uri}/issues/update/${id}`,issue);\n  }\n\n  deleteIssue(id){\n    return this.http.get(`${this.uri}/issues/delete/${id}`)\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}